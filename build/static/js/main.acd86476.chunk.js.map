{"version":3,"sources":["components/BingoGridItem.js","components/BingoGrid.js","buzzwords.js","App.js","reportWebVitals.js","index.js"],"names":["BingoGridItem","props","state","active","initActive","id","toggleActive","bind","key","this","currentState","setState","classNames","onClick","className","buzzword","Component","BingoGrid","renderGrid","console","log","buzzwords","splice","value","map","item","uuidv4","buzzwordList","App","bingoBoard","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acd86476.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass BingoGridItem extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            active: this.initActive(this.props.id)\n        }\n        this.toggleActive = this.toggleActive.bind(this)\n    }\n\n    initActive(key) {\n        if (key === 'free') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    toggleActive() {\n        if (this.props.id !== 'free') {\n            const currentState = this.state.active\n            this.setState({ active: !currentState })\n        }\n    }\n\n    render() {\n        let defaultStyles = 'p-3 rounded border-2 border-white text-center break-words '\n        let activeStyles = 'bg-green-300 text-gray-800 font-bold'\n        let inactiveStyles = 'text-white'\n        let classNames = defaultStyles + (this.state.active ? activeStyles : inactiveStyles)\n\n        return (\n            <div\n                id={this.props.id}\n                onClick={this.toggleActive}\n                className={classNames} >\n                {this.props.buzzword}\n            </div>\n        )\n    }\n}\n\nexport default BingoGridItem\n","import React, { Component } from 'react'\nimport BingoGridItem from './BingoGridItem.js'\nimport { v4 as uuidv4 } from 'uuid';\n\nclass BingoGrid extends Component {\n    constructor(props) {\n        super(props)\n        this.renderGrid = this.renderGrid.bind(this)\n    }\n\n    // TODO: use a different method to update buzzword array state\n\n    // TODO: use a separate method to add free space to the grid - if there's a way to insert it without adding to the array, that'd be great\n\n    renderGrid() {\n        // const bingoBoard = this.state.buzzwords\n        console.log('pre-splice', this.props.buzzwords);\n\n        // * insert \"free\" into the array at index 12\n        // TODO - FIGURE OUT WHY THIS ITEM IS DUPLICATED IN THE ARRAY BUT ONLY MAPPING ONE COMPONENT\n        this.props.buzzwords.splice(12, 1, {value: 'FREE', id: 'free'})\n        console.log('post-splice', this.props.buzzwords);\n\n        return this.props.buzzwords.map(\n            (item) => <BingoGridItem key={item.id + '-' + uuidv4()} id={item.id} buzzword={item.value} />\n        )\n    }\n\n    // shuffle() {\n    //     console.log(this.state.buzzwords)\n    //     this.setState(function(state) {\n    //         // console.log(state.buzzwords);\n    //         state.buzzwords.splice(12, 1)\n    //         var array = state.buzzwords\n    //         console.log('after splice', array);\n    //         console.log('after splice', state.buzzwords);\n\n    //         var currentIndex = this.state.buzzwords.length,\n    //             temporaryValue,\n    //             randomIndex\n\n    //         // While there remain elements to shuffle...\n    //         while (0 !== currentIndex) {\n    //             // Pick a remaining element...\n    //             randomIndex = Math.floor(\n    //                 Math.random() * currentIndex,\n    //             )\n    //             currentIndex -= 1\n    //             // console.log(array, currentIndex)\n\n    //             // And swap it with the current element.\n    //             temporaryValue = array[currentIndex]\n    //             array[currentIndex] = array[randomIndex]\n    //             array[randomIndex] = temporaryValue\n    //         }\n    //         return {\n    //             buzzwords: array\n    //         }\n    //     })\n    // }\n\n    render() {\n        return (\n            <div className=\"grid grid-cols-5 gap-2 my-4\">\n                {this.renderGrid()}\n            </div>\n        )\n    }\n}\n\nexport default BingoGrid\n","export const buzzwordList = [\n    {\n        \"value\": \"Ownership\",\n        \"id\": \"ownership\"\n    },\n    {\n        \"value\": \"Take This Offline\",\n        \"id\": \"takethisoffline\"\n    },\n    {\n        \"value\": \"Out Of Scope\",\n        \"id\": \"outofscope\"\n    },\n    {\n        \"value\": \"Sidebar\",\n        \"id\": \"sidebar\"\n    },\n    {\n        \"value\": \"Risk\",\n        \"id\": \"risk\"\n    },\n    {\n        \"value\": \"At The End Of The Day\",\n        \"id\": \"attheendoftheday\"\n    },\n    {\n        \"value\": \"Fast And Furious\",\n        \"id\": \"fastandfurious\"\n    },\n    {\n        \"value\": \"Issue Tracker\",\n        \"id\": \"issuetracker\"\n    },\n    {\n        \"value\": \"Next Steps\",\n        \"id\": \"nextsteps\"\n    },\n    {\n        \"value\": \"Work In Progress\",\n        \"id\": \"workinprogress\"\n    },\n    {\n        \"value\": \"Open Items\",\n        \"id\": \"openitems\"\n    },\n    {\n        \"value\": \"Smoke And Mirrors\",\n        \"id\": \"smokeandmirrors\"\n    },\n    {\n        \"value\": \"Larger Conversation\",\n        \"id\": \"largerconversation\"\n    },\n    {\n        \"value\": \"Lift And Shift\",\n        \"id\": \"liftandshift\"\n    },\n    {\n        \"value\": \"Touch Base\",\n        \"id\": \"touchbase\"\n    },\n    {\n        \"value\": \"Re-Invent The Wheel\",\n        \"id\": \"re-inventthewheel\"\n    },\n    {\n        \"value\": \"Close To Time\",\n        \"id\": \"closetotime\"\n    },\n    {\n        \"value\": \"Development Timeline/Timeframe\",\n        \"id\": \"developmenttimeline/timeframe\"\n    },\n    {\n        \"value\": \"Dependencies\",\n        \"id\": \"dependencies\"\n    },\n    {\n        \"value\": \"Close The Loop\",\n        \"id\": \"closetheloop\"\n    },\n    {\n        \"value\": \"Out Of The Box\",\n        \"id\": \"outofthebox\"\n    },\n    {\n        \"value\": \"Agile\",\n        \"id\": \"agile\"\n    },\n    {\n        \"value\": \"Deliverables\",\n        \"id\": \"deliverables\"\n    },\n    {\n        \"value\": \"Roadmap\",\n        \"id\": \"roadmap\"\n    },\n    {\n        \"value\": \"Moving Parts\",\n        \"id\": \"movingparts\"\n    },\n    {\n        \"value\": \"Feedback\",\n        \"id\": \"feedback\"\n    },\n    {\n        \"value\": \"Circle Back\",\n        \"id\": \"circleback\"\n    },\n    {\n        \"value\": \"Pushback\",\n        \"id\": \"pushback\"\n    },\n    {\n        \"value\": \"Deep Dive\",\n        \"id\": \"deepdive\"\n    },\n    {\n        \"value\": \"Customer Journey\",\n        \"id\": \"customerjourney\"\n    },\n    {\n        \"value\": \"Leverage\",\n        \"id\": \"leverage\"\n    },\n    {\n        \"value\": \"Level Of Effort\",\n        \"id\": \"levelofeffort\"\n    },\n    {\n        \"value\": \"Looped In\",\n        \"id\": \"loopedin\"\n    },\n    {\n        \"value\": \"Heads Down\",\n        \"id\": \"headsdown\"\n    },\n    {\n        \"value\": \"Fast Follow\",\n        \"id\": \"fastfollow\"\n    },\n    {\n        \"value\": \"In My Old Life\",\n        \"id\": \"inmyoldlife\"\n    }\n]\n","import BingoGrid from './components/BingoGrid.js'\nimport { buzzwordList } from './buzzwords'\n\nfunction App() {\n\n  // TODO: RENDER FULL BUZZWORDS BANK\n\n  // TODO: FILTER TO 24 FOR BINGO BOARD CARDS, SAVE TO BROWSER STORAGE WITH SIDE EFFECT\n  const bingoBoard = buzzwordList.slice(0, 25)\n  console.log(bingoBoard);\n\n  // TODO: SERVE SHUFFLED ARRAY BACK TO BingoGrid AND SAVE TO BROWSER STORAGE AGAIN\n  function shuffleClick() {\n    console.log('click');\n    var currentIndex = bingoBoard.length,\n      temporaryValue,\n      randomIndex\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(\n        Math.random() * currentIndex,\n      )\n      currentIndex -= 1\n      // console.log(array, currentIndex)\n\n      // And swap it with the current element.\n      temporaryValue = bingoBoard[currentIndex]\n      bingoBoard[currentIndex] = bingoBoard[randomIndex]\n      bingoBoard[randomIndex] = temporaryValue\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <main className=\"bg-gray-900\">\n        <div className=\"w-full min-h-screen text-blue-100 p-2\">\n          <h1 className=\"text-center my-4 text-2xl font-bold text-green-300 uppercase\">Buzzword Bingo!</h1>\n          <section id=\"bingo\" className=\"container p-2\">\n            <BingoGrid buzzwords={bingoBoard} />\n            {/* <button disabled className=\"rounded p-4 bg-blue-100 text-gray-900 font-bold disabled:opacity-50\" onClick={shuffleClick}>Shuffle</button> */}\n          </section>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}