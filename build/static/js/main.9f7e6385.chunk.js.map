{"version":3,"sources":["components/BingoGridItem.js","components/BingoGrid.js","App.js","reportWebVitals.js","index.js"],"names":["BingoGridItem","props","state","active","toggleActive","bind","currentState","this","setState","classNames","id","key","onClick","className","buzzword","Component","BingoGrid","renderGrid","buzzwords","map","item","index","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAiCeA,E,kDA9BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAAQ,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALL,E,2DASf,IAAMC,EAAeC,KAAKL,MAAMC,OAChCI,KAAKC,SAAS,CAAEL,QAASG,M,+BAIzB,IAGIG,EAHgB,kDAGcF,KAAKL,MAAMC,OAF1B,uCACE,cAGrB,OACI,qBACIO,GAAIH,KAAKN,MAAMU,IACfC,QAASL,KAAKH,aACdS,UAAWJ,EAHf,SAIKF,KAAKN,MAAMa,UAJNP,KAAKN,MAAMU,S,GArBLI,aCuBbC,E,kDArBX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDgB,WAAa,EAAKA,WAAWZ,KAAhB,gBAFH,E,yDAMf,OAAOE,KAAKN,MAAMiB,UAAUC,KACxB,SAACC,EAAMC,GAAP,OACA,cAAC,EAAD,CAA6BP,SAAUM,EAAKE,OAAxBF,EAAKV,S,+BAK7B,OACI,qBAAKG,UAAU,6BAAf,SACKN,KAAKU,mB,GAhBEF,aCoBTQ,MArBf,WASE,OACE,qBAAKV,UAAU,MAAf,SACE,sBAAKA,UAAU,oDAAf,UACE,oBAAIA,UAAU,mBAAd,6BACA,yBAASH,GAAG,QAAZ,SACE,cAAC,EAAD,CAAWQ,UAbD,CAChB,CAACR,GAAI,YAAaY,MAAO,qBACzB,CAACZ,GAAI,YAAaY,MAAO,qBACzB,CAACZ,GAAI,YAAaY,MAAO,qBACzB,CAACZ,GAAI,YAAaY,MAAO,qBACzB,CAACZ,GAAI,YAAaY,MAAO,gCCIdE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9f7e6385.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass BingoGridItem extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            active: false\n        }\n        this.toggleActive = this.toggleActive.bind(this)\n    }\n\n    toggleActive() {\n        const currentState = this.state.active\n        this.setState({ active: !currentState })\n    }\n\n    render() {\n        let defaultStyles = 'p-2 rounded border-2 border-white text-center '\n        let activeStyles = 'bg-green-300 text-gray-800 font-bold'\n        let inactiveStyles = 'text-white'\n        let classNames = defaultStyles + (this.state.active ? activeStyles : inactiveStyles)\n\n        return (\n            <div key={this.props.key}\n                id={this.props.key}\n                onClick={this.toggleActive}\n                className={classNames} >\n                {this.props.buzzword}\n            </div>\n        )\n    }\n}\n\nexport default BingoGridItem\n","import React, { Component } from 'react'\nimport BingoGridItem from './BingoGridItem.js'\n\nclass BingoGrid extends Component {\n    constructor(props) {\n        super(props)\n        this.renderGrid = this.renderGrid.bind(this)\n    }\n\n    renderGrid() {\n        return this.props.buzzwords.map(\n            (item, index) =>\n            <BingoGridItem key={item.id} buzzword={item.value} />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"grid grid-cols-5 gap-4 p-4\">\n                {this.renderGrid()}\n            </div>\n        )\n    }\n}\n\nexport default BingoGrid\n","import BingoGrid from './components/BingoGrid.js'\n\nfunction App() {\n  const buzzwords = [\n    {id: 'buzzword1', value: 'Buzzword phrase 1'},\n    {id: 'buzzword2', value: 'Buzzword phrase 2'},\n    {id: 'buzzword3', value: 'Buzzword phrase 3'},\n    {id: 'buzzword4', value: 'Buzzword phrase 4'},\n    {id: 'buzzword5', value: 'Buzzword phrase 5'},\n  ]\n\n  return (\n    <div className=\"App\">\n      <div className=\"w-full min-h-screen bg-gray-900 text-blue-100 p-2\">\n        <h1 className=\"text-center my-4\">Buzzword Bingo!</h1>\n        <section id=\"bingo\">\n          <BingoGrid buzzwords={buzzwords} />\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}